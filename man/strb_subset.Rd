% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subset.R
\name{strb_subset}
\alias{strb_subset}
\alias{strb_detect}
\title{Keep strings matching a pattern.}
\usage{
strb_subset(string, pattern, negate = FALSE)

strb_detect(string, pattern, negate = FALSE)
}
\arguments{
\item{string}{a character vector}

\item{pattern}{Pattern to look for}

\item{negate}{If TRUE, return non-matching elements}
}
\value{
A character vector.
}
\description{
strb_subset() is grep() with argument to stringr::str_subset().
strb_detect() is grepl() with argument to stringr::str_detect().
The {stringr} package depends on more than 50 packages while strb_* uses only R base.
For analyses that do not require a large amount of memory,
the strb_* functions seem to combine the advantages of basic R with the simple syntax of stringr.
}
\examples{

fruit <- c("apple", "banana", "pear", "pineapple")
strb_subset(fruit, "^a")

#fruit <- rep(c("apple", "banana", "pear", "pineapple"), 100000)
#bench::mark(
#  stringr::str_subset(fruit, "^a"),
#  strb_subset(fruit, "^a"),
#  grep("^a", fruit, value = TRUE),
#  stringi::stri_subset(fruit, regex = "^a"))

}
\seealso{
\link[stringr:str_subset]{stringr::str_subset}, \link[stringr:str_detect]{stringr::str_detect}, \code{\link[=grep]{grep()}} and \code{\link[=grepl]{grepl()}}
}
