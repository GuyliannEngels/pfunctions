usethis::use_package("rstudioapi")
use_mit_license()
usethis::use_mit_license()
library(pfunctions)
usethis::use_package("usethis")
usethis::use_package("fs")
usethis::use_package("rmarkdown")
library(pfunctions)
pfunctions::knit_all_rmd_project("../runninganalyses/results/reports.Rmd")
pfunctions::knit_all_rmd_project("../runninganalyses/")
library(pfunctions)
?pfunctions
library(pfunctions, help = TRUE)
library(pfunctions)
knit_all_rmd_project(path = "../runninganalyses/R/")
pfunctions::knit_all_rmd_project(path = "../runninganalyses/R/")
?knit_all_rmd_project
knit_all_rmd_project()
pfunctions::knit_all_rmd_project()
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
source("~/Documents/GitHub/GuyliannEngels/pfunctions/R/check_project.R")
source("~/Documents/GitHub/GuyliannEngels/pfunctions/R/check_project.R")
usethis::use_package("shiny")
usethis::use_package("miniUI")
?
shinyobserveEvent
?shiny::shinyobserveEvent
check_project <- function() {
ui <- miniUI::miniPage(
miniUI::gadgetTitleBar("Check my project"),
miniUI::miniContentPanel(
#TODO
h3("Compilation en html des fichier Rmd"),
shiny::tableOutput("render")
)
)
server <- function(input, output, session) {
output$render <- shiny::renderTable({
res <- pfunctions::render_all_rmd_project(".")
tibble(files = names(res), result = res)
})
shiny::observeEvent(input$done, {
shiny::stopApp()
})
}
viewer <- shiny::paneViewer(300)
shiny::runGadget(ui, server, viewer = viewer)
}
usethis::use_package("tibble")
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
res <- list(
"class" = vector("character"),
"result" = vector("character")
)
#'
#' @import usethis fs rmarkdown
#'
#' @return  a list
#' @export
#'
#' @examples
#' #library(pfunctions)
#' #test <- render_all_rmd_project()
#'
render_all_rmd_project <- function(path = ".", ...) {
usethis::proj_set(path = path)
paths <- fs::dir_ls(path = path, recurse = TRUE, glob = "*.Rmd")
res <- list()
for(i in seq_along(paths)) {
res[i] <- try(rmarkdown::render(paths[i],
output_format = rmarkdown::html_document(
toc = TRUE, number_sections = TRUE, code_folding = "hide",
anchor_sections = TRUE, self_contained = FALSE), quiet = TRUE),
silent = TRUE)
}
names(res) <- paths
return(res)
}
#'
#' @import usethis fs rmarkdown
#'
#' @return  a list
#' @export
#'
#' @examples
#' #library(pfunctions)
#' #test <- render_all_rmd_project()
#'
render_all_rmd_project <- function(path = ".", ...) {
usethis::proj_set(path = path)
paths <- fs::dir_ls(path = path, recurse = TRUE, glob = "*.Rmd")
res <- list()
for(i in seq_along(paths)) {
res[i] <- try(rmarkdown::render(paths[i],
output_format = rmarkdown::html_document(
toc = TRUE, number_sections = TRUE, code_folding = "hide",
anchor_sections = TRUE, self_contained = FALSE), quiet = TRUE),
silent = TRUE)
}
names(res) <- paths
return(res)
}
res <- tibble::tibble(
"file" = vector("character", length = paths_lg),
"check" = vector("character", length = paths_lg),
"result" = vector("character", length = paths_lg)
)
paths_lg = 3
res <- tibble::tibble(
"file" = vector("character", length = paths_lg),
"check" = vector("character", length = paths_lg),
"result" = vector("character", length = paths_lg)
)
View(res)
res <- tibble::tibble(
"file" = vector("character"),
"check" = vector("character"),
"result" = vector("character")
)
res <- tibble::tibble(
"file" = vector("character"),
"check" = vector("character"),
"result" = vector("character")
)
res <- tibble::tibble(
"file" = vector("character", paths_lg),
"check" = vector("character", paths_lg),
"result" = vector("character", paths_lg)
)
render_all_rmd_project1 <- function(path = ".", ...) {
usethis::proj_set(path = path)
paths <- fs::dir_ls(path = path, recurse = TRUE, glob = "*.Rmd")
paths_lg <- length(paths)
res <- tibble::tibble(
"file" = vector("character", paths_lg),
"check" = vector("character", paths_lg),
"result" = vector("character", paths_lg)
)
for(i in seq_along(paths)) {
rmd_res <- try(rmarkdown::render(paths[i],
output_format = rmarkdown::html_document(
toc = TRUE, number_sections = TRUE, code_folding = "hide",
anchor_sections = TRUE, self_contained = FALSE), quiet = TRUE),
silent = TRUE)
rmd_res1 <- list("file" = paths[i] , "check" = class(rmd_res), "result" = as.character(rmd_res))
res[i, ] <- rmd_res1
}
#names(res) <- paths
return(res)
}
render_all_rmd_project1 <- function(path = ".", ...) {
usethis::proj_set(path = path)
paths <- fs::dir_ls(path = path, recurse = TRUE, glob = "*.Rmd")
paths_lg <- length(paths)
res <- tibble::tibble(
"file" = vector("character", paths_lg),
"check" = vector("character", paths_lg),
"result" = vector("character", paths_lg)
)
for(i in seq_along(paths)) {
rmd_res <- try(rmarkdown::render(paths[i],
output_format = rmarkdown::html_document(
toc = TRUE, number_sections = TRUE, code_folding = "hide",
anchor_sections = TRUE, self_contained = FALSE), quiet = TRUE),
silent = TRUE)
rmd_res1 <- list("file" = paths[i] , "check" = ifelse(class(rmd_res) != "try_error", yes = "OK", no = "ERROR"), "result" = as.character(rmd_res))
res[i, ] <- rmd_res1
}
#names(res) <- paths
return(res)
}
render_all_rmd_project1 <- function(path = ".", ...) {
usethis::proj_set(path = path)
paths <- fs::dir_ls(path = path, recurse = TRUE, glob = "*.Rmd")
paths_lg <- length(paths)
res <- tibble::tibble(
"file" = vector("character", paths_lg),
"check" = vector("character", paths_lg),
"result" = vector("character", paths_lg)
)
for(i in seq_along(paths)) {
rmd_res <- try(rmarkdown::render(paths[i],
output_format = rmarkdown::html_document(
toc = TRUE, number_sections = TRUE, code_folding = "hide",
anchor_sections = TRUE, self_contained = FALSE), quiet = TRUE),
silent = TRUE)
rmd_res1 <- list("file" = paths[i] , "check" = ifelse(class(rmd_res) == "try-error", yes = "ERROR", no = "OK"), "result" = as.character(rmd_res))
res[i, ] <- rmd_res1
}
#names(res) <- paths
return(res)
}
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
library(pfunctions)
usethis::edit_file
usethis::use_package("rstudioapi")
res <- data.frame()(
"file" = vector("character", paths_lg),
"check" = vector("character", paths_lg),
"result" = vector("character", paths_lg)
)
res <- data.frame(
"file" = vector("character", paths_lg),
"check" = vector("character", paths_lg),
"result" = vector("character", paths_lg)
)
render_all_rmd_project <- function(path = ".", ...) {
#usethis::proj_set(path = path)
root <- rprojroot::is_rstudio_project
root$find_file()
paths <- fs::dir_ls(path = path, recurse = TRUE, glob = "*.Rmd")
paths_lg <- length(paths)
res <- data.frame(
"file" = vector("character", paths_lg),
"check" = vector("character", paths_lg),
"result" = vector("character", paths_lg)
)
for(i in seq_along(paths)) {
rmd_res <- try(rmarkdown::render(paths[i],
output_format = rmarkdown::html_document(
toc = TRUE, number_sections = TRUE, code_folding = "hide",
anchor_sections = TRUE, self_contained = FALSE), quiet = TRUE),
silent = TRUE)
rmd_res1 <- list("file" = paths[i] , "check" = ifelse(class(rmd_res) == "try-error", yes = "ERROR", no = "OK"), "result" = as.character(rmd_res))
res[i, ] <- rmd_res1
}
#names(res) <- paths
return(res)
}
render_all_rmd_project <- function(path = ".", ...) {
#usethis::proj_set(path = path)
rprojroot::find_root(rprojroot::is_rstudio_project, path = path)
paths <- fs::dir_ls(path = path, recurse = TRUE, glob = "*.Rmd")
paths_lg <- length(paths)
res <- data.frame(
"file" = vector("character", paths_lg),
"check" = vector("character", paths_lg),
"result" = vector("character", paths_lg)
)
for(i in seq_along(paths)) {
rmd_res <- try(rmarkdown::render(paths[i],
output_format = rmarkdown::html_document(
toc = TRUE, number_sections = TRUE, code_folding = "hide",
anchor_sections = TRUE, self_contained = FALSE), quiet = TRUE),
silent = TRUE)
rmd_res1 <- list("file" = paths[i] , "check" = ifelse(class(rmd_res) == "try-error", yes = "ERROR", no = "OK"), "result" = as.character(rmd_res))
res[i, ] <- rmd_res1
}
#names(res) <- paths
return(res)
}
render_all_rmd_project()
library(pfunctions)
library(pfunctions)
#'
#' @import rprojroot rmarkdown
#'
#' @return  a data.frame
#' @export
#'
#' @examples
#' #library(pfunctions)
#' #test <- render_all_rmd_project()
#'
render_all_rmd_project <- function(path = ".", ...) {
rprojroot::find_root(rprojroot::is_rstudio_project, path = path)
#paths <- fs::dir_ls(path = path, recurse = TRUE, glob = "*.Rmd")
paths <- list.files(path= path, pattern = "*.Rmd", recursive = TRUE)
paths_lg <- length(paths)
res <- data.frame(
"file" = vector("character", paths_lg),
"check" = vector("character", paths_lg),
"result" = vector("character", paths_lg)
)
for(i in seq_along(paths)) {
rmd_res <- try(rmarkdown::render(paths[i],
output_format = rmarkdown::html_document(
toc = TRUE, number_sections = TRUE, code_folding = "hide",
anchor_sections = TRUE, self_contained = FALSE), quiet = TRUE),
silent = TRUE, ...)
rmd_res1 <- list(
"file" = paths[i] ,
"check" = ifelse(class(rmd_res) == "try-error", yes = "ERROR", no = "OK"),
"result" = as.character(rmd_res))
res[i, ] <- rmd_res1
}
return(res)
}
rprojroot::find_root(rprojroot::is_rstudio_project, path = ".")
library(pfunctions)
testons <- "docs/distribution.Rmd"
gsub(".Rmd$", "_corr.Rmd$", x = testons)
gsub(".Rmd$", "_corr.Rmd", x = testons)
#'
#' @import rprojroot rmarkdown
#'
#' @return  a data.frame with the results of the compilations in html
#' @export
#'
#' @examples
#' #library(pfunctions)
#' #test <- render_all_rmd_project()
#'
render_all_rmd_project <- function(path = ".", correction = FASLE) {
# Check if us a rstuio project
rprojroot::find_root(rprojroot::is_rstudio_project, path = path)
# Find all rmd files
paths <- list.files(path = path, pattern = "*.Rmd", recursive = TRUE)
paths_lg <- length(paths)
res <- data.frame(
"file" = vector("character", paths_lg),
"check" = vector("character", paths_lg),
"result" = vector("character", paths_lg)
)
for(i in seq_along(paths)) {
rmd_res <- try(rmarkdown::render(paths[i],
output_format = rmarkdown::html_document(toc = TRUE, number_sections = TRUE, code_folding = "hide",
anchor_sections = TRUE, self_contained = FALSE), quiet = TRUE),
silent = TRUE)
rmd_res1 <- list(
"file" = paths[i] ,
"check" = ifelse(class(rmd_res) == "try-error", yes = "ERROR", no = "OK"),
"result" = as.character(rmd_res))
res[i, ] <- rmd_res1
}
if(isTRUE(correction)) {
res1 <- res[res$check == "ERROR",]
if(nrow(res1)>0) {
res1$file_corr <-gsub(".Rmd$", "_corr.Rmd", x = res1$file)
}
file.copy(from = res1$file, to = res1$file_corr)
}
return(res)
}
library(pfunctions)
library(pfunctions)
library(pfunctions)
